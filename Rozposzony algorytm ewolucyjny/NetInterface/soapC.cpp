/* soapC.cpp
   Generated by gSOAP 2.7.15 from NetInteface.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.15 2010-05-12 22:14:15 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	soap->header = soap_new_SOAP_ENV__Header(soap, -1);
		soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ns__sendMessage:
		return soap_in_ns__sendMessage(soap, NULL, NULL, "ns:sendMessage");
	case SOAP_TYPE_ns__sendMessageResponse:
		return soap_in_ns__sendMessageResponse(soap, NULL, NULL, "ns:sendMessageResponse");
	case SOAP_TYPE_ns__getConnectedNodes:
		return soap_in_ns__getConnectedNodes(soap, NULL, NULL, "ns:getConnectedNodes");
	case SOAP_TYPE_ns__getConnectedNodesResponse:
		return soap_in_ns__getConnectedNodesResponse(soap, NULL, NULL, "ns:getConnectedNodesResponse");
	case SOAP_TYPE_ns__newTask:
		return soap_in_ns__newTask(soap, NULL, NULL, "ns:newTask");
	case SOAP_TYPE_ns__newTaskResponse:
		return soap_in_ns__newTaskResponse(soap, NULL, NULL, "ns:newTaskResponse");
	case SOAP_TYPE_ns__setAppParameter:
		return soap_in_ns__setAppParameter(soap, NULL, NULL, "ns:setAppParameter");
	case SOAP_TYPE_ns__setAppParameterResponse:
		return soap_in_ns__setAppParameterResponse(soap, NULL, NULL, "ns:setAppParameterResponse");
	case SOAP_TYPE_ns__getAppStatus:
		return soap_in_ns__getAppStatus(soap, NULL, NULL, "ns:getAppStatus");
	case SOAP_TYPE_ns__getAppStatusResponse:
		return soap_in_ns__getAppStatusResponse(soap, NULL, NULL, "ns:getAppStatusResponse");
	case SOAP_TYPE_ns__getSpecimens:
		return soap_in_ns__getSpecimens(soap, NULL, NULL, "ns:getSpecimens");
	case SOAP_TYPE_ns__getSpecimensResponse:
		return soap_in_ns__getSpecimensResponse(soap, NULL, NULL, "ns:getSpecimensResponse");
	case SOAP_TYPE_ns__unRegistNode:
		return soap_in_ns__unRegistNode(soap, NULL, NULL, "ns:unRegistNode");
	case SOAP_TYPE_ns__unRegistNodeResponse:
		return soap_in_ns__unRegistNodeResponse(soap, NULL, NULL, "ns:unRegistNodeResponse");
	case SOAP_TYPE_ns__registNode:
		return soap_in_ns__registNode(soap, NULL, NULL, "ns:registNode");
	case SOAP_TYPE_ns__registNodeResponse:
		return soap_in_ns__registNodeResponse(soap, NULL, NULL, "ns:registNodeResponse");
	case SOAP_TYPE_ns__sendConectionsProblem:
		return soap_in_ns__sendConectionsProblem(soap, NULL, NULL, "ns:sendConectionsProblem");
	case SOAP_TYPE_ns__sendConectionsProblemResponse:
		return soap_in_ns__sendConectionsProblemResponse(soap, NULL, NULL, "ns:sendConectionsProblemResponse");
	case SOAP_TYPE_ns__setConections:
		return soap_in_ns__setConections(soap, NULL, NULL, "ns:setConections");
	case SOAP_TYPE_ns__setConectionsResponse:
		return soap_in_ns__setConectionsResponse(soap, NULL, NULL, "ns:setConectionsResponse");
	case SOAP_TYPE_ns__runAlgorithm:
		return soap_in_ns__runAlgorithm(soap, NULL, NULL, "ns:runAlgorithm");
	case SOAP_TYPE_ns__runAlgorithmResponse:
		return soap_in_ns__runAlgorithmResponse(soap, NULL, NULL, "ns:runAlgorithmResponse");
	case SOAP_TYPE_ns__setParameter:
		return soap_in_ns__setParameter(soap, NULL, NULL, "ns:setParameter");
	case SOAP_TYPE_ns__setParameterResponse:
		return soap_in_ns__setParameterResponse(soap, NULL, NULL, "ns:setParameterResponse");
	case SOAP_TYPE_ns__getStatus:
		return soap_in_ns__getStatus(soap, NULL, NULL, "ns:getStatus");
	case SOAP_TYPE_ns__getStatusResponse:
		return soap_in_ns__getStatusResponse(soap, NULL, NULL, "ns:getStatusResponse");
	case SOAP_TYPE_ns__exchangeSpecimens:
		return soap_in_ns__exchangeSpecimens(soap, NULL, NULL, "ns:exchangeSpecimens");
	case SOAP_TYPE_ns__exchangeSpecimensResponse:
		return soap_in_ns__exchangeSpecimensResponse(soap, NULL, NULL, "ns:exchangeSpecimensResponse");
	case SOAP_TYPE_ns__setEndPoint:
		return soap_in_ns__setEndPoint(soap, NULL, NULL, "ns:setEndPoint");
	case SOAP_TYPE_ns__setEndPointResponse:
		return soap_in_ns__setEndPointResponse(soap, NULL, NULL, "ns:setEndPointResponse");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:sendMessage"))
		{	*type = SOAP_TYPE_ns__sendMessage;
			return soap_in_ns__sendMessage(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:sendMessageResponse"))
		{	*type = SOAP_TYPE_ns__sendMessageResponse;
			return soap_in_ns__sendMessageResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getConnectedNodes"))
		{	*type = SOAP_TYPE_ns__getConnectedNodes;
			return soap_in_ns__getConnectedNodes(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getConnectedNodesResponse"))
		{	*type = SOAP_TYPE_ns__getConnectedNodesResponse;
			return soap_in_ns__getConnectedNodesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:newTask"))
		{	*type = SOAP_TYPE_ns__newTask;
			return soap_in_ns__newTask(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:newTaskResponse"))
		{	*type = SOAP_TYPE_ns__newTaskResponse;
			return soap_in_ns__newTaskResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:setAppParameter"))
		{	*type = SOAP_TYPE_ns__setAppParameter;
			return soap_in_ns__setAppParameter(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:setAppParameterResponse"))
		{	*type = SOAP_TYPE_ns__setAppParameterResponse;
			return soap_in_ns__setAppParameterResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getAppStatus"))
		{	*type = SOAP_TYPE_ns__getAppStatus;
			return soap_in_ns__getAppStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getAppStatusResponse"))
		{	*type = SOAP_TYPE_ns__getAppStatusResponse;
			return soap_in_ns__getAppStatusResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getSpecimens"))
		{	*type = SOAP_TYPE_ns__getSpecimens;
			return soap_in_ns__getSpecimens(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getSpecimensResponse"))
		{	*type = SOAP_TYPE_ns__getSpecimensResponse;
			return soap_in_ns__getSpecimensResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:unRegistNode"))
		{	*type = SOAP_TYPE_ns__unRegistNode;
			return soap_in_ns__unRegistNode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:unRegistNodeResponse"))
		{	*type = SOAP_TYPE_ns__unRegistNodeResponse;
			return soap_in_ns__unRegistNodeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:registNode"))
		{	*type = SOAP_TYPE_ns__registNode;
			return soap_in_ns__registNode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:registNodeResponse"))
		{	*type = SOAP_TYPE_ns__registNodeResponse;
			return soap_in_ns__registNodeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:sendConectionsProblem"))
		{	*type = SOAP_TYPE_ns__sendConectionsProblem;
			return soap_in_ns__sendConectionsProblem(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:sendConectionsProblemResponse"))
		{	*type = SOAP_TYPE_ns__sendConectionsProblemResponse;
			return soap_in_ns__sendConectionsProblemResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:setConections"))
		{	*type = SOAP_TYPE_ns__setConections;
			return soap_in_ns__setConections(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:setConectionsResponse"))
		{	*type = SOAP_TYPE_ns__setConectionsResponse;
			return soap_in_ns__setConectionsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:runAlgorithm"))
		{	*type = SOAP_TYPE_ns__runAlgorithm;
			return soap_in_ns__runAlgorithm(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:runAlgorithmResponse"))
		{	*type = SOAP_TYPE_ns__runAlgorithmResponse;
			return soap_in_ns__runAlgorithmResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:setParameter"))
		{	*type = SOAP_TYPE_ns__setParameter;
			return soap_in_ns__setParameter(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:setParameterResponse"))
		{	*type = SOAP_TYPE_ns__setParameterResponse;
			return soap_in_ns__setParameterResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getStatus"))
		{	*type = SOAP_TYPE_ns__getStatus;
			return soap_in_ns__getStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getStatusResponse"))
		{	*type = SOAP_TYPE_ns__getStatusResponse;
			return soap_in_ns__getStatusResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:exchangeSpecimens"))
		{	*type = SOAP_TYPE_ns__exchangeSpecimens;
			return soap_in_ns__exchangeSpecimens(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:exchangeSpecimensResponse"))
		{	*type = SOAP_TYPE_ns__exchangeSpecimensResponse;
			return soap_in_ns__exchangeSpecimensResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:setEndPoint"))
		{	*type = SOAP_TYPE_ns__setEndPoint;
			return soap_in_ns__setEndPoint(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:setEndPointResponse"))
		{	*type = SOAP_TYPE_ns__setEndPointResponse;
			return soap_in_ns__setEndPointResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_ns__sendMessage:
		return soap_out_ns__sendMessage(soap, tag, id, (const struct ns__sendMessage *)ptr, "ns:sendMessage");
	case SOAP_TYPE_ns__sendMessageResponse:
		return soap_out_ns__sendMessageResponse(soap, tag, id, (const struct ns__sendMessageResponse *)ptr, "ns:sendMessageResponse");
	case SOAP_TYPE_ns__getConnectedNodes:
		return soap_out_ns__getConnectedNodes(soap, tag, id, (const struct ns__getConnectedNodes *)ptr, "ns:getConnectedNodes");
	case SOAP_TYPE_ns__getConnectedNodesResponse:
		return soap_out_ns__getConnectedNodesResponse(soap, tag, id, (const struct ns__getConnectedNodesResponse *)ptr, "ns:getConnectedNodesResponse");
	case SOAP_TYPE_ns__newTask:
		return soap_out_ns__newTask(soap, tag, id, (const struct ns__newTask *)ptr, "ns:newTask");
	case SOAP_TYPE_ns__newTaskResponse:
		return soap_out_ns__newTaskResponse(soap, tag, id, (const struct ns__newTaskResponse *)ptr, "ns:newTaskResponse");
	case SOAP_TYPE_ns__setAppParameter:
		return soap_out_ns__setAppParameter(soap, tag, id, (const struct ns__setAppParameter *)ptr, "ns:setAppParameter");
	case SOAP_TYPE_ns__setAppParameterResponse:
		return soap_out_ns__setAppParameterResponse(soap, tag, id, (const struct ns__setAppParameterResponse *)ptr, "ns:setAppParameterResponse");
	case SOAP_TYPE_ns__getAppStatus:
		return soap_out_ns__getAppStatus(soap, tag, id, (const struct ns__getAppStatus *)ptr, "ns:getAppStatus");
	case SOAP_TYPE_ns__getAppStatusResponse:
		return soap_out_ns__getAppStatusResponse(soap, tag, id, (const struct ns__getAppStatusResponse *)ptr, "ns:getAppStatusResponse");
	case SOAP_TYPE_ns__getSpecimens:
		return soap_out_ns__getSpecimens(soap, tag, id, (const struct ns__getSpecimens *)ptr, "ns:getSpecimens");
	case SOAP_TYPE_ns__getSpecimensResponse:
		return soap_out_ns__getSpecimensResponse(soap, tag, id, (const struct ns__getSpecimensResponse *)ptr, "ns:getSpecimensResponse");
	case SOAP_TYPE_ns__unRegistNode:
		return soap_out_ns__unRegistNode(soap, tag, id, (const struct ns__unRegistNode *)ptr, "ns:unRegistNode");
	case SOAP_TYPE_ns__unRegistNodeResponse:
		return soap_out_ns__unRegistNodeResponse(soap, tag, id, (const struct ns__unRegistNodeResponse *)ptr, "ns:unRegistNodeResponse");
	case SOAP_TYPE_ns__registNode:
		return soap_out_ns__registNode(soap, tag, id, (const struct ns__registNode *)ptr, "ns:registNode");
	case SOAP_TYPE_ns__registNodeResponse:
		return soap_out_ns__registNodeResponse(soap, tag, id, (const struct ns__registNodeResponse *)ptr, "ns:registNodeResponse");
	case SOAP_TYPE_ns__sendConectionsProblem:
		return soap_out_ns__sendConectionsProblem(soap, tag, id, (const struct ns__sendConectionsProblem *)ptr, "ns:sendConectionsProblem");
	case SOAP_TYPE_ns__sendConectionsProblemResponse:
		return soap_out_ns__sendConectionsProblemResponse(soap, tag, id, (const struct ns__sendConectionsProblemResponse *)ptr, "ns:sendConectionsProblemResponse");
	case SOAP_TYPE_ns__setConections:
		return soap_out_ns__setConections(soap, tag, id, (const struct ns__setConections *)ptr, "ns:setConections");
	case SOAP_TYPE_ns__setConectionsResponse:
		return soap_out_ns__setConectionsResponse(soap, tag, id, (const struct ns__setConectionsResponse *)ptr, "ns:setConectionsResponse");
	case SOAP_TYPE_ns__runAlgorithm:
		return soap_out_ns__runAlgorithm(soap, tag, id, (const struct ns__runAlgorithm *)ptr, "ns:runAlgorithm");
	case SOAP_TYPE_ns__runAlgorithmResponse:
		return soap_out_ns__runAlgorithmResponse(soap, tag, id, (const struct ns__runAlgorithmResponse *)ptr, "ns:runAlgorithmResponse");
	case SOAP_TYPE_ns__setParameter:
		return soap_out_ns__setParameter(soap, tag, id, (const struct ns__setParameter *)ptr, "ns:setParameter");
	case SOAP_TYPE_ns__setParameterResponse:
		return soap_out_ns__setParameterResponse(soap, tag, id, (const struct ns__setParameterResponse *)ptr, "ns:setParameterResponse");
	case SOAP_TYPE_ns__getStatus:
		return soap_out_ns__getStatus(soap, tag, id, (const struct ns__getStatus *)ptr, "ns:getStatus");
	case SOAP_TYPE_ns__getStatusResponse:
		return soap_out_ns__getStatusResponse(soap, tag, id, (const struct ns__getStatusResponse *)ptr, "ns:getStatusResponse");
	case SOAP_TYPE_ns__exchangeSpecimens:
		return soap_out_ns__exchangeSpecimens(soap, tag, id, (const struct ns__exchangeSpecimens *)ptr, "ns:exchangeSpecimens");
	case SOAP_TYPE_ns__exchangeSpecimensResponse:
		return soap_out_ns__exchangeSpecimensResponse(soap, tag, id, (const struct ns__exchangeSpecimensResponse *)ptr, "ns:exchangeSpecimensResponse");
	case SOAP_TYPE_ns__setEndPoint:
		return soap_out_ns__setEndPoint(soap, tag, id, (const struct ns__setEndPoint *)ptr, "ns:setEndPoint");
	case SOAP_TYPE_ns__setEndPointResponse:
		return soap_out_ns__setEndPointResponse(soap, tag, id, (const struct ns__setEndPointResponse *)ptr, "ns:setEndPointResponse");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns__sendMessage:
		soap_serialize_ns__sendMessage(soap, (const struct ns__sendMessage *)ptr);
		break;
	case SOAP_TYPE_ns__sendMessageResponse:
		soap_serialize_ns__sendMessageResponse(soap, (const struct ns__sendMessageResponse *)ptr);
		break;
	case SOAP_TYPE_ns__getConnectedNodes:
		soap_serialize_ns__getConnectedNodes(soap, (const struct ns__getConnectedNodes *)ptr);
		break;
	case SOAP_TYPE_ns__getConnectedNodesResponse:
		soap_serialize_ns__getConnectedNodesResponse(soap, (const struct ns__getConnectedNodesResponse *)ptr);
		break;
	case SOAP_TYPE_ns__newTask:
		soap_serialize_ns__newTask(soap, (const struct ns__newTask *)ptr);
		break;
	case SOAP_TYPE_ns__newTaskResponse:
		soap_serialize_ns__newTaskResponse(soap, (const struct ns__newTaskResponse *)ptr);
		break;
	case SOAP_TYPE_ns__setAppParameter:
		soap_serialize_ns__setAppParameter(soap, (const struct ns__setAppParameter *)ptr);
		break;
	case SOAP_TYPE_ns__setAppParameterResponse:
		soap_serialize_ns__setAppParameterResponse(soap, (const struct ns__setAppParameterResponse *)ptr);
		break;
	case SOAP_TYPE_ns__getAppStatus:
		soap_serialize_ns__getAppStatus(soap, (const struct ns__getAppStatus *)ptr);
		break;
	case SOAP_TYPE_ns__getAppStatusResponse:
		soap_serialize_ns__getAppStatusResponse(soap, (const struct ns__getAppStatusResponse *)ptr);
		break;
	case SOAP_TYPE_ns__getSpecimens:
		soap_serialize_ns__getSpecimens(soap, (const struct ns__getSpecimens *)ptr);
		break;
	case SOAP_TYPE_ns__getSpecimensResponse:
		soap_serialize_ns__getSpecimensResponse(soap, (const struct ns__getSpecimensResponse *)ptr);
		break;
	case SOAP_TYPE_ns__unRegistNode:
		soap_serialize_ns__unRegistNode(soap, (const struct ns__unRegistNode *)ptr);
		break;
	case SOAP_TYPE_ns__unRegistNodeResponse:
		soap_serialize_ns__unRegistNodeResponse(soap, (const struct ns__unRegistNodeResponse *)ptr);
		break;
	case SOAP_TYPE_ns__registNode:
		soap_serialize_ns__registNode(soap, (const struct ns__registNode *)ptr);
		break;
	case SOAP_TYPE_ns__registNodeResponse:
		soap_serialize_ns__registNodeResponse(soap, (const struct ns__registNodeResponse *)ptr);
		break;
	case SOAP_TYPE_ns__sendConectionsProblem:
		soap_serialize_ns__sendConectionsProblem(soap, (const struct ns__sendConectionsProblem *)ptr);
		break;
	case SOAP_TYPE_ns__sendConectionsProblemResponse:
		soap_serialize_ns__sendConectionsProblemResponse(soap, (const struct ns__sendConectionsProblemResponse *)ptr);
		break;
	case SOAP_TYPE_ns__setConections:
		soap_serialize_ns__setConections(soap, (const struct ns__setConections *)ptr);
		break;
	case SOAP_TYPE_ns__setConectionsResponse:
		soap_serialize_ns__setConectionsResponse(soap, (const struct ns__setConectionsResponse *)ptr);
		break;
	case SOAP_TYPE_ns__runAlgorithm:
		soap_serialize_ns__runAlgorithm(soap, (const struct ns__runAlgorithm *)ptr);
		break;
	case SOAP_TYPE_ns__runAlgorithmResponse:
		soap_serialize_ns__runAlgorithmResponse(soap, (const struct ns__runAlgorithmResponse *)ptr);
		break;
	case SOAP_TYPE_ns__setParameter:
		soap_serialize_ns__setParameter(soap, (const struct ns__setParameter *)ptr);
		break;
	case SOAP_TYPE_ns__setParameterResponse:
		soap_serialize_ns__setParameterResponse(soap, (const struct ns__setParameterResponse *)ptr);
		break;
	case SOAP_TYPE_ns__getStatus:
		soap_serialize_ns__getStatus(soap, (const struct ns__getStatus *)ptr);
		break;
	case SOAP_TYPE_ns__getStatusResponse:
		soap_serialize_ns__getStatusResponse(soap, (const struct ns__getStatusResponse *)ptr);
		break;
	case SOAP_TYPE_ns__exchangeSpecimens:
		soap_serialize_ns__exchangeSpecimens(soap, (const struct ns__exchangeSpecimens *)ptr);
		break;
	case SOAP_TYPE_ns__exchangeSpecimensResponse:
		soap_serialize_ns__exchangeSpecimensResponse(soap, (const struct ns__exchangeSpecimensResponse *)ptr);
		break;
	case SOAP_TYPE_ns__setEndPoint:
		soap_serialize_ns__setEndPoint(soap, (const struct ns__setEndPoint *)ptr);
		break;
	case SOAP_TYPE_ns__setEndPointResponse:
		soap_serialize_ns__setEndPointResponse(soap, (const struct ns__setEndPointResponse *)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__setEndPointResponse:
		return (void*)soap_instantiate_ns__setEndPointResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__setEndPoint:
		return (void*)soap_instantiate_ns__setEndPoint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__exchangeSpecimensResponse:
		return (void*)soap_instantiate_ns__exchangeSpecimensResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__exchangeSpecimens:
		return (void*)soap_instantiate_ns__exchangeSpecimens(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getStatusResponse:
		return (void*)soap_instantiate_ns__getStatusResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getStatus:
		return (void*)soap_instantiate_ns__getStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__setParameterResponse:
		return (void*)soap_instantiate_ns__setParameterResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__setParameter:
		return (void*)soap_instantiate_ns__setParameter(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__runAlgorithmResponse:
		return (void*)soap_instantiate_ns__runAlgorithmResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__runAlgorithm:
		return (void*)soap_instantiate_ns__runAlgorithm(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__setConectionsResponse:
		return (void*)soap_instantiate_ns__setConectionsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__setConections:
		return (void*)soap_instantiate_ns__setConections(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__sendConectionsProblemResponse:
		return (void*)soap_instantiate_ns__sendConectionsProblemResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__sendConectionsProblem:
		return (void*)soap_instantiate_ns__sendConectionsProblem(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__registNodeResponse:
		return (void*)soap_instantiate_ns__registNodeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__registNode:
		return (void*)soap_instantiate_ns__registNode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__unRegistNodeResponse:
		return (void*)soap_instantiate_ns__unRegistNodeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__unRegistNode:
		return (void*)soap_instantiate_ns__unRegistNode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getSpecimensResponse:
		return (void*)soap_instantiate_ns__getSpecimensResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getSpecimens:
		return (void*)soap_instantiate_ns__getSpecimens(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getAppStatusResponse:
		return (void*)soap_instantiate_ns__getAppStatusResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getAppStatus:
		return (void*)soap_instantiate_ns__getAppStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__setAppParameterResponse:
		return (void*)soap_instantiate_ns__setAppParameterResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__setAppParameter:
		return (void*)soap_instantiate_ns__setAppParameter(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__newTaskResponse:
		return (void*)soap_instantiate_ns__newTaskResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__newTask:
		return (void*)soap_instantiate_ns__newTask(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getConnectedNodesResponse:
		return (void*)soap_instantiate_ns__getConnectedNodesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getConnectedNodes:
		return (void*)soap_instantiate_ns__getConnectedNodes(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__sendMessageResponse:
		return (void*)soap_instantiate_ns__sendMessageResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__sendMessage:
		return (void*)soap_instantiate_ns__sendMessage(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_ns__setEndPointResponse:
		if (p->size < 0)
			delete (struct ns__setEndPointResponse*)p->ptr;
		else
			delete[] (struct ns__setEndPointResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns__setEndPoint:
		if (p->size < 0)
			delete (struct ns__setEndPoint*)p->ptr;
		else
			delete[] (struct ns__setEndPoint*)p->ptr;
		break;
	case SOAP_TYPE_ns__exchangeSpecimensResponse:
		if (p->size < 0)
			delete (struct ns__exchangeSpecimensResponse*)p->ptr;
		else
			delete[] (struct ns__exchangeSpecimensResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns__exchangeSpecimens:
		if (p->size < 0)
			delete (struct ns__exchangeSpecimens*)p->ptr;
		else
			delete[] (struct ns__exchangeSpecimens*)p->ptr;
		break;
	case SOAP_TYPE_ns__getStatusResponse:
		if (p->size < 0)
			delete (struct ns__getStatusResponse*)p->ptr;
		else
			delete[] (struct ns__getStatusResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns__getStatus:
		if (p->size < 0)
			delete (struct ns__getStatus*)p->ptr;
		else
			delete[] (struct ns__getStatus*)p->ptr;
		break;
	case SOAP_TYPE_ns__setParameterResponse:
		if (p->size < 0)
			delete (struct ns__setParameterResponse*)p->ptr;
		else
			delete[] (struct ns__setParameterResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns__setParameter:
		if (p->size < 0)
			delete (struct ns__setParameter*)p->ptr;
		else
			delete[] (struct ns__setParameter*)p->ptr;
		break;
	case SOAP_TYPE_ns__runAlgorithmResponse:
		if (p->size < 0)
			delete (struct ns__runAlgorithmResponse*)p->ptr;
		else
			delete[] (struct ns__runAlgorithmResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns__runAlgorithm:
		if (p->size < 0)
			delete (struct ns__runAlgorithm*)p->ptr;
		else
			delete[] (struct ns__runAlgorithm*)p->ptr;
		break;
	case SOAP_TYPE_ns__setConectionsResponse:
		if (p->size < 0)
			delete (struct ns__setConectionsResponse*)p->ptr;
		else
			delete[] (struct ns__setConectionsResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns__setConections:
		if (p->size < 0)
			delete (struct ns__setConections*)p->ptr;
		else
			delete[] (struct ns__setConections*)p->ptr;
		break;
	case SOAP_TYPE_ns__sendConectionsProblemResponse:
		if (p->size < 0)
			delete (struct ns__sendConectionsProblemResponse*)p->ptr;
		else
			delete[] (struct ns__sendConectionsProblemResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns__sendConectionsProblem:
		if (p->size < 0)
			delete (struct ns__sendConectionsProblem*)p->ptr;
		else
			delete[] (struct ns__sendConectionsProblem*)p->ptr;
		break;
	case SOAP_TYPE_ns__registNodeResponse:
		if (p->size < 0)
			delete (struct ns__registNodeResponse*)p->ptr;
		else
			delete[] (struct ns__registNodeResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns__registNode:
		if (p->size < 0)
			delete (struct ns__registNode*)p->ptr;
		else
			delete[] (struct ns__registNode*)p->ptr;
		break;
	case SOAP_TYPE_ns__unRegistNodeResponse:
		if (p->size < 0)
			delete (struct ns__unRegistNodeResponse*)p->ptr;
		else
			delete[] (struct ns__unRegistNodeResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns__unRegistNode:
		if (p->size < 0)
			delete (struct ns__unRegistNode*)p->ptr;
		else
			delete[] (struct ns__unRegistNode*)p->ptr;
		break;
	case SOAP_TYPE_ns__getSpecimensResponse:
		if (p->size < 0)
			delete (struct ns__getSpecimensResponse*)p->ptr;
		else
			delete[] (struct ns__getSpecimensResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns__getSpecimens:
		if (p->size < 0)
			delete (struct ns__getSpecimens*)p->ptr;
		else
			delete[] (struct ns__getSpecimens*)p->ptr;
		break;
	case SOAP_TYPE_ns__getAppStatusResponse:
		if (p->size < 0)
			delete (struct ns__getAppStatusResponse*)p->ptr;
		else
			delete[] (struct ns__getAppStatusResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns__getAppStatus:
		if (p->size < 0)
			delete (struct ns__getAppStatus*)p->ptr;
		else
			delete[] (struct ns__getAppStatus*)p->ptr;
		break;
	case SOAP_TYPE_ns__setAppParameterResponse:
		if (p->size < 0)
			delete (struct ns__setAppParameterResponse*)p->ptr;
		else
			delete[] (struct ns__setAppParameterResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns__setAppParameter:
		if (p->size < 0)
			delete (struct ns__setAppParameter*)p->ptr;
		else
			delete[] (struct ns__setAppParameter*)p->ptr;
		break;
	case SOAP_TYPE_ns__newTaskResponse:
		if (p->size < 0)
			delete (struct ns__newTaskResponse*)p->ptr;
		else
			delete[] (struct ns__newTaskResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns__newTask:
		if (p->size < 0)
			delete (struct ns__newTask*)p->ptr;
		else
			delete[] (struct ns__newTask*)p->ptr;
		break;
	case SOAP_TYPE_ns__getConnectedNodesResponse:
		if (p->size < 0)
			delete (struct ns__getConnectedNodesResponse*)p->ptr;
		else
			delete[] (struct ns__getConnectedNodesResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns__getConnectedNodes:
		if (p->size < 0)
			delete (struct ns__getConnectedNodes*)p->ptr;
		else
			delete[] (struct ns__getConnectedNodes*)p->ptr;
		break;
	case SOAP_TYPE_ns__sendMessageResponse:
		if (p->size < 0)
			delete (struct ns__sendMessageResponse*)p->ptr;
		else
			delete[] (struct ns__sendMessageResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns__sendMessage:
		if (p->size < 0)
			delete (struct ns__sendMessage*)p->ptr;
		else
			delete[] (struct ns__sendMessage*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new (std::string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag_fault = 1;
	size_t soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new (struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__sendMessage(struct soap *soap, struct ns__sendMessage *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->message);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__sendMessage(struct soap *soap, const struct ns__sendMessage *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->message);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__sendMessage(struct soap *soap, const char *tag, int id, const struct ns__sendMessage *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__sendMessage), type))
		return soap->error;
	if (soap_out_std__string(soap, "message", -1, &a->message, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__sendMessage * SOAP_FMAC4 soap_in_ns__sendMessage(struct soap *soap, const char *tag, struct ns__sendMessage *a, const char *type)
{
	size_t soap_flag_message = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__sendMessage *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__sendMessage, sizeof(struct ns__sendMessage), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__sendMessage(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_message && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "message", &a->message, "xsd:string"))
				{	soap_flag_message--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__sendMessage *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__sendMessage, 0, sizeof(struct ns__sendMessage), 0, soap_copy_ns__sendMessage);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_message > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__sendMessage(struct soap *soap, const struct ns__sendMessage *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__sendMessage);
	if (soap_out_ns__sendMessage(soap, tag?tag:"ns:sendMessage", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__sendMessage * SOAP_FMAC4 soap_get_ns__sendMessage(struct soap *soap, struct ns__sendMessage *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__sendMessage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__sendMessage * SOAP_FMAC2 soap_instantiate_ns__sendMessage(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__sendMessage(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__sendMessage, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns__sendMessage);
		if (size)
			*size = sizeof(struct ns__sendMessage);
	}
	else
	{	cp->ptr = (void*)new (struct ns__sendMessage[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__sendMessage);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__sendMessage*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__sendMessage(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__sendMessage %p -> %p\n", q, p));
	*(struct ns__sendMessage*)p = *(struct ns__sendMessage*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__sendMessageResponse(struct soap *soap, struct ns__sendMessageResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__sendMessageResponse(struct soap *soap, const struct ns__sendMessageResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__sendMessageResponse(struct soap *soap, const char *tag, int id, const struct ns__sendMessageResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__sendMessageResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__sendMessageResponse * SOAP_FMAC4 soap_in_ns__sendMessageResponse(struct soap *soap, const char *tag, struct ns__sendMessageResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__sendMessageResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__sendMessageResponse, sizeof(struct ns__sendMessageResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__sendMessageResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__sendMessageResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__sendMessageResponse, 0, sizeof(struct ns__sendMessageResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__sendMessageResponse(struct soap *soap, const struct ns__sendMessageResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__sendMessageResponse);
	if (soap_out_ns__sendMessageResponse(soap, tag?tag:"ns:sendMessageResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__sendMessageResponse * SOAP_FMAC4 soap_get_ns__sendMessageResponse(struct soap *soap, struct ns__sendMessageResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__sendMessageResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__sendMessageResponse * SOAP_FMAC2 soap_instantiate_ns__sendMessageResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__sendMessageResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__sendMessageResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns__sendMessageResponse);
		if (size)
			*size = sizeof(struct ns__sendMessageResponse);
	}
	else
	{	cp->ptr = (void*)new (struct ns__sendMessageResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__sendMessageResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__sendMessageResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__sendMessageResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__sendMessageResponse %p -> %p\n", q, p));
	*(struct ns__sendMessageResponse*)p = *(struct ns__sendMessageResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getConnectedNodes(struct soap *soap, struct ns__getConnectedNodes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getConnectedNodes(struct soap *soap, const struct ns__getConnectedNodes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getConnectedNodes(struct soap *soap, const char *tag, int id, const struct ns__getConnectedNodes *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getConnectedNodes), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getConnectedNodes * SOAP_FMAC4 soap_in_ns__getConnectedNodes(struct soap *soap, const char *tag, struct ns__getConnectedNodes *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getConnectedNodes *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getConnectedNodes, sizeof(struct ns__getConnectedNodes), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getConnectedNodes(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getConnectedNodes *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getConnectedNodes, 0, sizeof(struct ns__getConnectedNodes), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getConnectedNodes(struct soap *soap, const struct ns__getConnectedNodes *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__getConnectedNodes);
	if (soap_out_ns__getConnectedNodes(soap, tag?tag:"ns:getConnectedNodes", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getConnectedNodes * SOAP_FMAC4 soap_get_ns__getConnectedNodes(struct soap *soap, struct ns__getConnectedNodes *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getConnectedNodes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getConnectedNodes * SOAP_FMAC2 soap_instantiate_ns__getConnectedNodes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getConnectedNodes(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getConnectedNodes, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns__getConnectedNodes);
		if (size)
			*size = sizeof(struct ns__getConnectedNodes);
	}
	else
	{	cp->ptr = (void*)new (struct ns__getConnectedNodes[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__getConnectedNodes);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__getConnectedNodes*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getConnectedNodes(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getConnectedNodes %p -> %p\n", q, p));
	*(struct ns__getConnectedNodes*)p = *(struct ns__getConnectedNodes*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getConnectedNodesResponse(struct soap *soap, struct ns__getConnectedNodesResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->conections);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getConnectedNodesResponse(struct soap *soap, const struct ns__getConnectedNodesResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->conections);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getConnectedNodesResponse(struct soap *soap, const char *tag, int id, const struct ns__getConnectedNodesResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getConnectedNodesResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "conections", -1, &a->conections, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getConnectedNodesResponse * SOAP_FMAC4 soap_in_ns__getConnectedNodesResponse(struct soap *soap, const char *tag, struct ns__getConnectedNodesResponse *a, const char *type)
{
	size_t soap_flag_conections = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getConnectedNodesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getConnectedNodesResponse, sizeof(struct ns__getConnectedNodesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__getConnectedNodesResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_conections && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "conections", &a->conections, "xsd:string"))
				{	soap_flag_conections--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getConnectedNodesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getConnectedNodesResponse, 0, sizeof(struct ns__getConnectedNodesResponse), 0, soap_copy_ns__getConnectedNodesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_conections > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getConnectedNodesResponse(struct soap *soap, const struct ns__getConnectedNodesResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__getConnectedNodesResponse);
	if (soap_out_ns__getConnectedNodesResponse(soap, tag?tag:"ns:getConnectedNodesResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getConnectedNodesResponse * SOAP_FMAC4 soap_get_ns__getConnectedNodesResponse(struct soap *soap, struct ns__getConnectedNodesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getConnectedNodesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getConnectedNodesResponse * SOAP_FMAC2 soap_instantiate_ns__getConnectedNodesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getConnectedNodesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getConnectedNodesResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns__getConnectedNodesResponse);
		if (size)
			*size = sizeof(struct ns__getConnectedNodesResponse);
	}
	else
	{	cp->ptr = (void*)new (struct ns__getConnectedNodesResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__getConnectedNodesResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__getConnectedNodesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getConnectedNodesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getConnectedNodesResponse %p -> %p\n", q, p));
	*(struct ns__getConnectedNodesResponse*)p = *(struct ns__getConnectedNodesResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__newTask(struct soap *soap, struct ns__newTask *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->task);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__newTask(struct soap *soap, const struct ns__newTask *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->task);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__newTask(struct soap *soap, const char *tag, int id, const struct ns__newTask *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__newTask), type))
		return soap->error;
	if (soap_out_std__string(soap, "task", -1, &a->task, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__newTask * SOAP_FMAC4 soap_in_ns__newTask(struct soap *soap, const char *tag, struct ns__newTask *a, const char *type)
{
	size_t soap_flag_task = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__newTask *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__newTask, sizeof(struct ns__newTask), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__newTask(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_task && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "task", &a->task, "xsd:string"))
				{	soap_flag_task--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__newTask *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__newTask, 0, sizeof(struct ns__newTask), 0, soap_copy_ns__newTask);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_task > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__newTask(struct soap *soap, const struct ns__newTask *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__newTask);
	if (soap_out_ns__newTask(soap, tag?tag:"ns:newTask", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__newTask * SOAP_FMAC4 soap_get_ns__newTask(struct soap *soap, struct ns__newTask *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__newTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__newTask * SOAP_FMAC2 soap_instantiate_ns__newTask(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__newTask(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__newTask, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns__newTask);
		if (size)
			*size = sizeof(struct ns__newTask);
	}
	else
	{	cp->ptr = (void*)new (struct ns__newTask[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__newTask);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__newTask*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__newTask(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__newTask %p -> %p\n", q, p));
	*(struct ns__newTask*)p = *(struct ns__newTask*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__newTaskResponse(struct soap *soap, struct ns__newTaskResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__newTaskResponse(struct soap *soap, const struct ns__newTaskResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__newTaskResponse(struct soap *soap, const char *tag, int id, const struct ns__newTaskResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__newTaskResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__newTaskResponse * SOAP_FMAC4 soap_in_ns__newTaskResponse(struct soap *soap, const char *tag, struct ns__newTaskResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__newTaskResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__newTaskResponse, sizeof(struct ns__newTaskResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__newTaskResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "result", &a->result, "xsd:string"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__newTaskResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__newTaskResponse, 0, sizeof(struct ns__newTaskResponse), 0, soap_copy_ns__newTaskResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__newTaskResponse(struct soap *soap, const struct ns__newTaskResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__newTaskResponse);
	if (soap_out_ns__newTaskResponse(soap, tag?tag:"ns:newTaskResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__newTaskResponse * SOAP_FMAC4 soap_get_ns__newTaskResponse(struct soap *soap, struct ns__newTaskResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__newTaskResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__newTaskResponse * SOAP_FMAC2 soap_instantiate_ns__newTaskResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__newTaskResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__newTaskResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns__newTaskResponse);
		if (size)
			*size = sizeof(struct ns__newTaskResponse);
	}
	else
	{	cp->ptr = (void*)new (struct ns__newTaskResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__newTaskResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__newTaskResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__newTaskResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__newTaskResponse %p -> %p\n", q, p));
	*(struct ns__newTaskResponse*)p = *(struct ns__newTaskResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__setAppParameter(struct soap *soap, struct ns__setAppParameter *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->parameterChange);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__setAppParameter(struct soap *soap, const struct ns__setAppParameter *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->parameterChange);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__setAppParameter(struct soap *soap, const char *tag, int id, const struct ns__setAppParameter *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__setAppParameter), type))
		return soap->error;
	if (soap_out_std__string(soap, "parameterChange", -1, &a->parameterChange, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__setAppParameter * SOAP_FMAC4 soap_in_ns__setAppParameter(struct soap *soap, const char *tag, struct ns__setAppParameter *a, const char *type)
{
	size_t soap_flag_parameterChange = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__setAppParameter *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__setAppParameter, sizeof(struct ns__setAppParameter), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__setAppParameter(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_parameterChange && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "parameterChange", &a->parameterChange, "xsd:string"))
				{	soap_flag_parameterChange--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__setAppParameter *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__setAppParameter, 0, sizeof(struct ns__setAppParameter), 0, soap_copy_ns__setAppParameter);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_parameterChange > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__setAppParameter(struct soap *soap, const struct ns__setAppParameter *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__setAppParameter);
	if (soap_out_ns__setAppParameter(soap, tag?tag:"ns:setAppParameter", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__setAppParameter * SOAP_FMAC4 soap_get_ns__setAppParameter(struct soap *soap, struct ns__setAppParameter *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__setAppParameter(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__setAppParameter * SOAP_FMAC2 soap_instantiate_ns__setAppParameter(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__setAppParameter(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__setAppParameter, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns__setAppParameter);
		if (size)
			*size = sizeof(struct ns__setAppParameter);
	}
	else
	{	cp->ptr = (void*)new (struct ns__setAppParameter[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__setAppParameter);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__setAppParameter*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__setAppParameter(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__setAppParameter %p -> %p\n", q, p));
	*(struct ns__setAppParameter*)p = *(struct ns__setAppParameter*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__setAppParameterResponse(struct soap *soap, struct ns__setAppParameterResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__setAppParameterResponse(struct soap *soap, const struct ns__setAppParameterResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__setAppParameterResponse(struct soap *soap, const char *tag, int id, const struct ns__setAppParameterResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__setAppParameterResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__setAppParameterResponse * SOAP_FMAC4 soap_in_ns__setAppParameterResponse(struct soap *soap, const char *tag, struct ns__setAppParameterResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__setAppParameterResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__setAppParameterResponse, sizeof(struct ns__setAppParameterResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__setAppParameterResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__setAppParameterResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__setAppParameterResponse, 0, sizeof(struct ns__setAppParameterResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__setAppParameterResponse(struct soap *soap, const struct ns__setAppParameterResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__setAppParameterResponse);
	if (soap_out_ns__setAppParameterResponse(soap, tag?tag:"ns:setAppParameterResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__setAppParameterResponse * SOAP_FMAC4 soap_get_ns__setAppParameterResponse(struct soap *soap, struct ns__setAppParameterResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__setAppParameterResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__setAppParameterResponse * SOAP_FMAC2 soap_instantiate_ns__setAppParameterResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__setAppParameterResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__setAppParameterResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns__setAppParameterResponse);
		if (size)
			*size = sizeof(struct ns__setAppParameterResponse);
	}
	else
	{	cp->ptr = (void*)new (struct ns__setAppParameterResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__setAppParameterResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__setAppParameterResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__setAppParameterResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__setAppParameterResponse %p -> %p\n", q, p));
	*(struct ns__setAppParameterResponse*)p = *(struct ns__setAppParameterResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getAppStatus(struct soap *soap, struct ns__getAppStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getAppStatus(struct soap *soap, const struct ns__getAppStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getAppStatus(struct soap *soap, const char *tag, int id, const struct ns__getAppStatus *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getAppStatus), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getAppStatus * SOAP_FMAC4 soap_in_ns__getAppStatus(struct soap *soap, const char *tag, struct ns__getAppStatus *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getAppStatus *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getAppStatus, sizeof(struct ns__getAppStatus), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getAppStatus(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getAppStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getAppStatus, 0, sizeof(struct ns__getAppStatus), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getAppStatus(struct soap *soap, const struct ns__getAppStatus *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__getAppStatus);
	if (soap_out_ns__getAppStatus(soap, tag?tag:"ns:getAppStatus", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getAppStatus * SOAP_FMAC4 soap_get_ns__getAppStatus(struct soap *soap, struct ns__getAppStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getAppStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getAppStatus * SOAP_FMAC2 soap_instantiate_ns__getAppStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getAppStatus(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getAppStatus, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns__getAppStatus);
		if (size)
			*size = sizeof(struct ns__getAppStatus);
	}
	else
	{	cp->ptr = (void*)new (struct ns__getAppStatus[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__getAppStatus);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__getAppStatus*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getAppStatus(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getAppStatus %p -> %p\n", q, p));
	*(struct ns__getAppStatus*)p = *(struct ns__getAppStatus*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getAppStatusResponse(struct soap *soap, struct ns__getAppStatusResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getAppStatusResponse(struct soap *soap, const struct ns__getAppStatusResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getAppStatusResponse(struct soap *soap, const char *tag, int id, const struct ns__getAppStatusResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getAppStatusResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getAppStatusResponse * SOAP_FMAC4 soap_in_ns__getAppStatusResponse(struct soap *soap, const char *tag, struct ns__getAppStatusResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getAppStatusResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getAppStatusResponse, sizeof(struct ns__getAppStatusResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__getAppStatusResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "result", &a->result, "xsd:string"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getAppStatusResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getAppStatusResponse, 0, sizeof(struct ns__getAppStatusResponse), 0, soap_copy_ns__getAppStatusResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getAppStatusResponse(struct soap *soap, const struct ns__getAppStatusResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__getAppStatusResponse);
	if (soap_out_ns__getAppStatusResponse(soap, tag?tag:"ns:getAppStatusResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getAppStatusResponse * SOAP_FMAC4 soap_get_ns__getAppStatusResponse(struct soap *soap, struct ns__getAppStatusResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getAppStatusResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getAppStatusResponse * SOAP_FMAC2 soap_instantiate_ns__getAppStatusResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getAppStatusResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getAppStatusResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns__getAppStatusResponse);
		if (size)
			*size = sizeof(struct ns__getAppStatusResponse);
	}
	else
	{	cp->ptr = (void*)new (struct ns__getAppStatusResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__getAppStatusResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__getAppStatusResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getAppStatusResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getAppStatusResponse %p -> %p\n", q, p));
	*(struct ns__getAppStatusResponse*)p = *(struct ns__getAppStatusResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getSpecimens(struct soap *soap, struct ns__getSpecimens *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getSpecimens(struct soap *soap, const struct ns__getSpecimens *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getSpecimens(struct soap *soap, const char *tag, int id, const struct ns__getSpecimens *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getSpecimens), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getSpecimens * SOAP_FMAC4 soap_in_ns__getSpecimens(struct soap *soap, const char *tag, struct ns__getSpecimens *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getSpecimens *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getSpecimens, sizeof(struct ns__getSpecimens), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getSpecimens(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getSpecimens *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getSpecimens, 0, sizeof(struct ns__getSpecimens), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getSpecimens(struct soap *soap, const struct ns__getSpecimens *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__getSpecimens);
	if (soap_out_ns__getSpecimens(soap, tag?tag:"ns:getSpecimens", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getSpecimens * SOAP_FMAC4 soap_get_ns__getSpecimens(struct soap *soap, struct ns__getSpecimens *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getSpecimens(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getSpecimens * SOAP_FMAC2 soap_instantiate_ns__getSpecimens(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getSpecimens(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getSpecimens, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns__getSpecimens);
		if (size)
			*size = sizeof(struct ns__getSpecimens);
	}
	else
	{	cp->ptr = (void*)new (struct ns__getSpecimens[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__getSpecimens);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__getSpecimens*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getSpecimens(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getSpecimens %p -> %p\n", q, p));
	*(struct ns__getSpecimens*)p = *(struct ns__getSpecimens*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getSpecimensResponse(struct soap *soap, struct ns__getSpecimensResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getSpecimensResponse(struct soap *soap, const struct ns__getSpecimensResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getSpecimensResponse(struct soap *soap, const char *tag, int id, const struct ns__getSpecimensResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getSpecimensResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getSpecimensResponse * SOAP_FMAC4 soap_in_ns__getSpecimensResponse(struct soap *soap, const char *tag, struct ns__getSpecimensResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getSpecimensResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getSpecimensResponse, sizeof(struct ns__getSpecimensResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__getSpecimensResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "result", &a->result, "xsd:string"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getSpecimensResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getSpecimensResponse, 0, sizeof(struct ns__getSpecimensResponse), 0, soap_copy_ns__getSpecimensResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getSpecimensResponse(struct soap *soap, const struct ns__getSpecimensResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__getSpecimensResponse);
	if (soap_out_ns__getSpecimensResponse(soap, tag?tag:"ns:getSpecimensResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getSpecimensResponse * SOAP_FMAC4 soap_get_ns__getSpecimensResponse(struct soap *soap, struct ns__getSpecimensResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getSpecimensResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getSpecimensResponse * SOAP_FMAC2 soap_instantiate_ns__getSpecimensResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getSpecimensResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getSpecimensResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns__getSpecimensResponse);
		if (size)
			*size = sizeof(struct ns__getSpecimensResponse);
	}
	else
	{	cp->ptr = (void*)new (struct ns__getSpecimensResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__getSpecimensResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__getSpecimensResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getSpecimensResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getSpecimensResponse %p -> %p\n", q, p));
	*(struct ns__getSpecimensResponse*)p = *(struct ns__getSpecimensResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__unRegistNode(struct soap *soap, struct ns__unRegistNode *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->endPoint);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__unRegistNode(struct soap *soap, const struct ns__unRegistNode *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->endPoint);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__unRegistNode(struct soap *soap, const char *tag, int id, const struct ns__unRegistNode *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__unRegistNode), type))
		return soap->error;
	if (soap_out_std__string(soap, "endPoint", -1, &a->endPoint, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__unRegistNode * SOAP_FMAC4 soap_in_ns__unRegistNode(struct soap *soap, const char *tag, struct ns__unRegistNode *a, const char *type)
{
	size_t soap_flag_endPoint = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__unRegistNode *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__unRegistNode, sizeof(struct ns__unRegistNode), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__unRegistNode(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_endPoint && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "endPoint", &a->endPoint, "xsd:string"))
				{	soap_flag_endPoint--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__unRegistNode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__unRegistNode, 0, sizeof(struct ns__unRegistNode), 0, soap_copy_ns__unRegistNode);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_endPoint > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__unRegistNode(struct soap *soap, const struct ns__unRegistNode *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__unRegistNode);
	if (soap_out_ns__unRegistNode(soap, tag?tag:"ns:unRegistNode", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__unRegistNode * SOAP_FMAC4 soap_get_ns__unRegistNode(struct soap *soap, struct ns__unRegistNode *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__unRegistNode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__unRegistNode * SOAP_FMAC2 soap_instantiate_ns__unRegistNode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__unRegistNode(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__unRegistNode, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns__unRegistNode);
		if (size)
			*size = sizeof(struct ns__unRegistNode);
	}
	else
	{	cp->ptr = (void*)new (struct ns__unRegistNode[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__unRegistNode);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__unRegistNode*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__unRegistNode(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__unRegistNode %p -> %p\n", q, p));
	*(struct ns__unRegistNode*)p = *(struct ns__unRegistNode*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__unRegistNodeResponse(struct soap *soap, struct ns__unRegistNodeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__unRegistNodeResponse(struct soap *soap, const struct ns__unRegistNodeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__unRegistNodeResponse(struct soap *soap, const char *tag, int id, const struct ns__unRegistNodeResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__unRegistNodeResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__unRegistNodeResponse * SOAP_FMAC4 soap_in_ns__unRegistNodeResponse(struct soap *soap, const char *tag, struct ns__unRegistNodeResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__unRegistNodeResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__unRegistNodeResponse, sizeof(struct ns__unRegistNodeResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__unRegistNodeResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__unRegistNodeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__unRegistNodeResponse, 0, sizeof(struct ns__unRegistNodeResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__unRegistNodeResponse(struct soap *soap, const struct ns__unRegistNodeResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__unRegistNodeResponse);
	if (soap_out_ns__unRegistNodeResponse(soap, tag?tag:"ns:unRegistNodeResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__unRegistNodeResponse * SOAP_FMAC4 soap_get_ns__unRegistNodeResponse(struct soap *soap, struct ns__unRegistNodeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__unRegistNodeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__unRegistNodeResponse * SOAP_FMAC2 soap_instantiate_ns__unRegistNodeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__unRegistNodeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__unRegistNodeResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns__unRegistNodeResponse);
		if (size)
			*size = sizeof(struct ns__unRegistNodeResponse);
	}
	else
	{	cp->ptr = (void*)new (struct ns__unRegistNodeResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__unRegistNodeResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__unRegistNodeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__unRegistNodeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__unRegistNodeResponse %p -> %p\n", q, p));
	*(struct ns__unRegistNodeResponse*)p = *(struct ns__unRegistNodeResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__registNode(struct soap *soap, struct ns__registNode *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->endPoint);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__registNode(struct soap *soap, const struct ns__registNode *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->endPoint);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__registNode(struct soap *soap, const char *tag, int id, const struct ns__registNode *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__registNode), type))
		return soap->error;
	if (soap_out_std__string(soap, "endPoint", -1, &a->endPoint, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__registNode * SOAP_FMAC4 soap_in_ns__registNode(struct soap *soap, const char *tag, struct ns__registNode *a, const char *type)
{
	size_t soap_flag_endPoint = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__registNode *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__registNode, sizeof(struct ns__registNode), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__registNode(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_endPoint && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "endPoint", &a->endPoint, "xsd:string"))
				{	soap_flag_endPoint--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__registNode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__registNode, 0, sizeof(struct ns__registNode), 0, soap_copy_ns__registNode);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_endPoint > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__registNode(struct soap *soap, const struct ns__registNode *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__registNode);
	if (soap_out_ns__registNode(soap, tag?tag:"ns:registNode", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__registNode * SOAP_FMAC4 soap_get_ns__registNode(struct soap *soap, struct ns__registNode *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__registNode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__registNode * SOAP_FMAC2 soap_instantiate_ns__registNode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__registNode(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__registNode, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns__registNode);
		if (size)
			*size = sizeof(struct ns__registNode);
	}
	else
	{	cp->ptr = (void*)new (struct ns__registNode[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__registNode);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__registNode*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__registNode(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__registNode %p -> %p\n", q, p));
	*(struct ns__registNode*)p = *(struct ns__registNode*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__registNodeResponse(struct soap *soap, struct ns__registNodeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__registNodeResponse(struct soap *soap, const struct ns__registNodeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__registNodeResponse(struct soap *soap, const char *tag, int id, const struct ns__registNodeResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__registNodeResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__registNodeResponse * SOAP_FMAC4 soap_in_ns__registNodeResponse(struct soap *soap, const char *tag, struct ns__registNodeResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__registNodeResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__registNodeResponse, sizeof(struct ns__registNodeResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__registNodeResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__registNodeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__registNodeResponse, 0, sizeof(struct ns__registNodeResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__registNodeResponse(struct soap *soap, const struct ns__registNodeResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__registNodeResponse);
	if (soap_out_ns__registNodeResponse(soap, tag?tag:"ns:registNodeResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__registNodeResponse * SOAP_FMAC4 soap_get_ns__registNodeResponse(struct soap *soap, struct ns__registNodeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__registNodeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__registNodeResponse * SOAP_FMAC2 soap_instantiate_ns__registNodeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__registNodeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__registNodeResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns__registNodeResponse);
		if (size)
			*size = sizeof(struct ns__registNodeResponse);
	}
	else
	{	cp->ptr = (void*)new (struct ns__registNodeResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__registNodeResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__registNodeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__registNodeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__registNodeResponse %p -> %p\n", q, p));
	*(struct ns__registNodeResponse*)p = *(struct ns__registNodeResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__sendConectionsProblem(struct soap *soap, struct ns__sendConectionsProblem *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->conectionProblem);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__sendConectionsProblem(struct soap *soap, const struct ns__sendConectionsProblem *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->conectionProblem);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__sendConectionsProblem(struct soap *soap, const char *tag, int id, const struct ns__sendConectionsProblem *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__sendConectionsProblem), type))
		return soap->error;
	if (soap_out_std__string(soap, "conectionProblem", -1, &a->conectionProblem, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__sendConectionsProblem * SOAP_FMAC4 soap_in_ns__sendConectionsProblem(struct soap *soap, const char *tag, struct ns__sendConectionsProblem *a, const char *type)
{
	size_t soap_flag_conectionProblem = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__sendConectionsProblem *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__sendConectionsProblem, sizeof(struct ns__sendConectionsProblem), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__sendConectionsProblem(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_conectionProblem && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "conectionProblem", &a->conectionProblem, "xsd:string"))
				{	soap_flag_conectionProblem--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__sendConectionsProblem *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__sendConectionsProblem, 0, sizeof(struct ns__sendConectionsProblem), 0, soap_copy_ns__sendConectionsProblem);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_conectionProblem > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__sendConectionsProblem(struct soap *soap, const struct ns__sendConectionsProblem *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__sendConectionsProblem);
	if (soap_out_ns__sendConectionsProblem(soap, tag?tag:"ns:sendConectionsProblem", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__sendConectionsProblem * SOAP_FMAC4 soap_get_ns__sendConectionsProblem(struct soap *soap, struct ns__sendConectionsProblem *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__sendConectionsProblem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__sendConectionsProblem * SOAP_FMAC2 soap_instantiate_ns__sendConectionsProblem(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__sendConectionsProblem(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__sendConectionsProblem, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns__sendConectionsProblem);
		if (size)
			*size = sizeof(struct ns__sendConectionsProblem);
	}
	else
	{	cp->ptr = (void*)new (struct ns__sendConectionsProblem[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__sendConectionsProblem);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__sendConectionsProblem*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__sendConectionsProblem(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__sendConectionsProblem %p -> %p\n", q, p));
	*(struct ns__sendConectionsProblem*)p = *(struct ns__sendConectionsProblem*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__sendConectionsProblemResponse(struct soap *soap, struct ns__sendConectionsProblemResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__sendConectionsProblemResponse(struct soap *soap, const struct ns__sendConectionsProblemResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__sendConectionsProblemResponse(struct soap *soap, const char *tag, int id, const struct ns__sendConectionsProblemResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__sendConectionsProblemResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__sendConectionsProblemResponse * SOAP_FMAC4 soap_in_ns__sendConectionsProblemResponse(struct soap *soap, const char *tag, struct ns__sendConectionsProblemResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__sendConectionsProblemResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__sendConectionsProblemResponse, sizeof(struct ns__sendConectionsProblemResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__sendConectionsProblemResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__sendConectionsProblemResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__sendConectionsProblemResponse, 0, sizeof(struct ns__sendConectionsProblemResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__sendConectionsProblemResponse(struct soap *soap, const struct ns__sendConectionsProblemResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__sendConectionsProblemResponse);
	if (soap_out_ns__sendConectionsProblemResponse(soap, tag?tag:"ns:sendConectionsProblemResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__sendConectionsProblemResponse * SOAP_FMAC4 soap_get_ns__sendConectionsProblemResponse(struct soap *soap, struct ns__sendConectionsProblemResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__sendConectionsProblemResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__sendConectionsProblemResponse * SOAP_FMAC2 soap_instantiate_ns__sendConectionsProblemResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__sendConectionsProblemResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__sendConectionsProblemResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns__sendConectionsProblemResponse);
		if (size)
			*size = sizeof(struct ns__sendConectionsProblemResponse);
	}
	else
	{	cp->ptr = (void*)new (struct ns__sendConectionsProblemResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__sendConectionsProblemResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__sendConectionsProblemResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__sendConectionsProblemResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__sendConectionsProblemResponse %p -> %p\n", q, p));
	*(struct ns__sendConectionsProblemResponse*)p = *(struct ns__sendConectionsProblemResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__setConections(struct soap *soap, struct ns__setConections *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->conections);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__setConections(struct soap *soap, const struct ns__setConections *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->conections);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__setConections(struct soap *soap, const char *tag, int id, const struct ns__setConections *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__setConections), type))
		return soap->error;
	if (soap_out_std__string(soap, "conections", -1, &a->conections, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__setConections * SOAP_FMAC4 soap_in_ns__setConections(struct soap *soap, const char *tag, struct ns__setConections *a, const char *type)
{
	size_t soap_flag_conections = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__setConections *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__setConections, sizeof(struct ns__setConections), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__setConections(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_conections && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "conections", &a->conections, "xsd:string"))
				{	soap_flag_conections--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__setConections *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__setConections, 0, sizeof(struct ns__setConections), 0, soap_copy_ns__setConections);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_conections > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__setConections(struct soap *soap, const struct ns__setConections *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__setConections);
	if (soap_out_ns__setConections(soap, tag?tag:"ns:setConections", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__setConections * SOAP_FMAC4 soap_get_ns__setConections(struct soap *soap, struct ns__setConections *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__setConections(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__setConections * SOAP_FMAC2 soap_instantiate_ns__setConections(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__setConections(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__setConections, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns__setConections);
		if (size)
			*size = sizeof(struct ns__setConections);
	}
	else
	{	cp->ptr = (void*)new (struct ns__setConections[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__setConections);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__setConections*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__setConections(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__setConections %p -> %p\n", q, p));
	*(struct ns__setConections*)p = *(struct ns__setConections*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__setConectionsResponse(struct soap *soap, struct ns__setConectionsResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__setConectionsResponse(struct soap *soap, const struct ns__setConectionsResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__setConectionsResponse(struct soap *soap, const char *tag, int id, const struct ns__setConectionsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__setConectionsResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__setConectionsResponse * SOAP_FMAC4 soap_in_ns__setConectionsResponse(struct soap *soap, const char *tag, struct ns__setConectionsResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__setConectionsResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__setConectionsResponse, sizeof(struct ns__setConectionsResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__setConectionsResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__setConectionsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__setConectionsResponse, 0, sizeof(struct ns__setConectionsResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__setConectionsResponse(struct soap *soap, const struct ns__setConectionsResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__setConectionsResponse);
	if (soap_out_ns__setConectionsResponse(soap, tag?tag:"ns:setConectionsResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__setConectionsResponse * SOAP_FMAC4 soap_get_ns__setConectionsResponse(struct soap *soap, struct ns__setConectionsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__setConectionsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__setConectionsResponse * SOAP_FMAC2 soap_instantiate_ns__setConectionsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__setConectionsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__setConectionsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns__setConectionsResponse);
		if (size)
			*size = sizeof(struct ns__setConectionsResponse);
	}
	else
	{	cp->ptr = (void*)new (struct ns__setConectionsResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__setConectionsResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__setConectionsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__setConectionsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__setConectionsResponse %p -> %p\n", q, p));
	*(struct ns__setConectionsResponse*)p = *(struct ns__setConectionsResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__runAlgorithm(struct soap *soap, struct ns__runAlgorithm *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__runAlgorithm(struct soap *soap, const struct ns__runAlgorithm *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__runAlgorithm(struct soap *soap, const char *tag, int id, const struct ns__runAlgorithm *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__runAlgorithm), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__runAlgorithm * SOAP_FMAC4 soap_in_ns__runAlgorithm(struct soap *soap, const char *tag, struct ns__runAlgorithm *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__runAlgorithm *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__runAlgorithm, sizeof(struct ns__runAlgorithm), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__runAlgorithm(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__runAlgorithm *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__runAlgorithm, 0, sizeof(struct ns__runAlgorithm), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__runAlgorithm(struct soap *soap, const struct ns__runAlgorithm *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__runAlgorithm);
	if (soap_out_ns__runAlgorithm(soap, tag?tag:"ns:runAlgorithm", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__runAlgorithm * SOAP_FMAC4 soap_get_ns__runAlgorithm(struct soap *soap, struct ns__runAlgorithm *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__runAlgorithm(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__runAlgorithm * SOAP_FMAC2 soap_instantiate_ns__runAlgorithm(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__runAlgorithm(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__runAlgorithm, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns__runAlgorithm);
		if (size)
			*size = sizeof(struct ns__runAlgorithm);
	}
	else
	{	cp->ptr = (void*)new (struct ns__runAlgorithm[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__runAlgorithm);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__runAlgorithm*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__runAlgorithm(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__runAlgorithm %p -> %p\n", q, p));
	*(struct ns__runAlgorithm*)p = *(struct ns__runAlgorithm*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__runAlgorithmResponse(struct soap *soap, struct ns__runAlgorithmResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_bool(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__runAlgorithmResponse(struct soap *soap, const struct ns__runAlgorithmResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__runAlgorithmResponse(struct soap *soap, const char *tag, int id, const struct ns__runAlgorithmResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__runAlgorithmResponse), type))
		return soap->error;
	if (soap_out_bool(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__runAlgorithmResponse * SOAP_FMAC4 soap_in_ns__runAlgorithmResponse(struct soap *soap, const char *tag, struct ns__runAlgorithmResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__runAlgorithmResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__runAlgorithmResponse, sizeof(struct ns__runAlgorithmResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__runAlgorithmResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "result", &a->result, "xsd:boolean"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__runAlgorithmResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__runAlgorithmResponse, 0, sizeof(struct ns__runAlgorithmResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__runAlgorithmResponse(struct soap *soap, const struct ns__runAlgorithmResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__runAlgorithmResponse);
	if (soap_out_ns__runAlgorithmResponse(soap, tag?tag:"ns:runAlgorithmResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__runAlgorithmResponse * SOAP_FMAC4 soap_get_ns__runAlgorithmResponse(struct soap *soap, struct ns__runAlgorithmResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__runAlgorithmResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__runAlgorithmResponse * SOAP_FMAC2 soap_instantiate_ns__runAlgorithmResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__runAlgorithmResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__runAlgorithmResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns__runAlgorithmResponse);
		if (size)
			*size = sizeof(struct ns__runAlgorithmResponse);
	}
	else
	{	cp->ptr = (void*)new (struct ns__runAlgorithmResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__runAlgorithmResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__runAlgorithmResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__runAlgorithmResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__runAlgorithmResponse %p -> %p\n", q, p));
	*(struct ns__runAlgorithmResponse*)p = *(struct ns__runAlgorithmResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__setParameter(struct soap *soap, struct ns__setParameter *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->parameterChange);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__setParameter(struct soap *soap, const struct ns__setParameter *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->parameterChange);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__setParameter(struct soap *soap, const char *tag, int id, const struct ns__setParameter *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__setParameter), type))
		return soap->error;
	if (soap_out_std__string(soap, "parameterChange", -1, &a->parameterChange, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__setParameter * SOAP_FMAC4 soap_in_ns__setParameter(struct soap *soap, const char *tag, struct ns__setParameter *a, const char *type)
{
	size_t soap_flag_parameterChange = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__setParameter *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__setParameter, sizeof(struct ns__setParameter), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__setParameter(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_parameterChange && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "parameterChange", &a->parameterChange, "xsd:string"))
				{	soap_flag_parameterChange--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__setParameter *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__setParameter, 0, sizeof(struct ns__setParameter), 0, soap_copy_ns__setParameter);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_parameterChange > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__setParameter(struct soap *soap, const struct ns__setParameter *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__setParameter);
	if (soap_out_ns__setParameter(soap, tag?tag:"ns:setParameter", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__setParameter * SOAP_FMAC4 soap_get_ns__setParameter(struct soap *soap, struct ns__setParameter *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__setParameter(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__setParameter * SOAP_FMAC2 soap_instantiate_ns__setParameter(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__setParameter(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__setParameter, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns__setParameter);
		if (size)
			*size = sizeof(struct ns__setParameter);
	}
	else
	{	cp->ptr = (void*)new (struct ns__setParameter[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__setParameter);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__setParameter*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__setParameter(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__setParameter %p -> %p\n", q, p));
	*(struct ns__setParameter*)p = *(struct ns__setParameter*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__setParameterResponse(struct soap *soap, struct ns__setParameterResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__setParameterResponse(struct soap *soap, const struct ns__setParameterResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__setParameterResponse(struct soap *soap, const char *tag, int id, const struct ns__setParameterResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__setParameterResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__setParameterResponse * SOAP_FMAC4 soap_in_ns__setParameterResponse(struct soap *soap, const char *tag, struct ns__setParameterResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__setParameterResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__setParameterResponse, sizeof(struct ns__setParameterResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__setParameterResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__setParameterResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__setParameterResponse, 0, sizeof(struct ns__setParameterResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__setParameterResponse(struct soap *soap, const struct ns__setParameterResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__setParameterResponse);
	if (soap_out_ns__setParameterResponse(soap, tag?tag:"ns:setParameterResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__setParameterResponse * SOAP_FMAC4 soap_get_ns__setParameterResponse(struct soap *soap, struct ns__setParameterResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__setParameterResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__setParameterResponse * SOAP_FMAC2 soap_instantiate_ns__setParameterResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__setParameterResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__setParameterResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns__setParameterResponse);
		if (size)
			*size = sizeof(struct ns__setParameterResponse);
	}
	else
	{	cp->ptr = (void*)new (struct ns__setParameterResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__setParameterResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__setParameterResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__setParameterResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__setParameterResponse %p -> %p\n", q, p));
	*(struct ns__setParameterResponse*)p = *(struct ns__setParameterResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getStatus(struct soap *soap, struct ns__getStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getStatus(struct soap *soap, const struct ns__getStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getStatus(struct soap *soap, const char *tag, int id, const struct ns__getStatus *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getStatus), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getStatus * SOAP_FMAC4 soap_in_ns__getStatus(struct soap *soap, const char *tag, struct ns__getStatus *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getStatus *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getStatus, sizeof(struct ns__getStatus), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getStatus(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getStatus, 0, sizeof(struct ns__getStatus), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getStatus(struct soap *soap, const struct ns__getStatus *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__getStatus);
	if (soap_out_ns__getStatus(soap, tag?tag:"ns:getStatus", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getStatus * SOAP_FMAC4 soap_get_ns__getStatus(struct soap *soap, struct ns__getStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getStatus * SOAP_FMAC2 soap_instantiate_ns__getStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getStatus(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getStatus, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns__getStatus);
		if (size)
			*size = sizeof(struct ns__getStatus);
	}
	else
	{	cp->ptr = (void*)new (struct ns__getStatus[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__getStatus);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__getStatus*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getStatus(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getStatus %p -> %p\n", q, p));
	*(struct ns__getStatus*)p = *(struct ns__getStatus*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getStatusResponse(struct soap *soap, struct ns__getStatusResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getStatusResponse(struct soap *soap, const struct ns__getStatusResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getStatusResponse(struct soap *soap, const char *tag, int id, const struct ns__getStatusResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getStatusResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getStatusResponse * SOAP_FMAC4 soap_in_ns__getStatusResponse(struct soap *soap, const char *tag, struct ns__getStatusResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getStatusResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getStatusResponse, sizeof(struct ns__getStatusResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__getStatusResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "result", &a->result, "xsd:string"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getStatusResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getStatusResponse, 0, sizeof(struct ns__getStatusResponse), 0, soap_copy_ns__getStatusResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getStatusResponse(struct soap *soap, const struct ns__getStatusResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__getStatusResponse);
	if (soap_out_ns__getStatusResponse(soap, tag?tag:"ns:getStatusResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getStatusResponse * SOAP_FMAC4 soap_get_ns__getStatusResponse(struct soap *soap, struct ns__getStatusResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getStatusResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getStatusResponse * SOAP_FMAC2 soap_instantiate_ns__getStatusResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getStatusResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getStatusResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns__getStatusResponse);
		if (size)
			*size = sizeof(struct ns__getStatusResponse);
	}
	else
	{	cp->ptr = (void*)new (struct ns__getStatusResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__getStatusResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__getStatusResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getStatusResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getStatusResponse %p -> %p\n", q, p));
	*(struct ns__getStatusResponse*)p = *(struct ns__getStatusResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__exchangeSpecimens(struct soap *soap, struct ns__exchangeSpecimens *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->specimentList);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__exchangeSpecimens(struct soap *soap, const struct ns__exchangeSpecimens *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->specimentList);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__exchangeSpecimens(struct soap *soap, const char *tag, int id, const struct ns__exchangeSpecimens *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__exchangeSpecimens), type))
		return soap->error;
	if (soap_out_std__string(soap, "specimentList", -1, &a->specimentList, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__exchangeSpecimens * SOAP_FMAC4 soap_in_ns__exchangeSpecimens(struct soap *soap, const char *tag, struct ns__exchangeSpecimens *a, const char *type)
{
	size_t soap_flag_specimentList = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__exchangeSpecimens *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__exchangeSpecimens, sizeof(struct ns__exchangeSpecimens), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__exchangeSpecimens(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_specimentList && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "specimentList", &a->specimentList, "xsd:string"))
				{	soap_flag_specimentList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__exchangeSpecimens *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__exchangeSpecimens, 0, sizeof(struct ns__exchangeSpecimens), 0, soap_copy_ns__exchangeSpecimens);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_specimentList > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__exchangeSpecimens(struct soap *soap, const struct ns__exchangeSpecimens *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__exchangeSpecimens);
	if (soap_out_ns__exchangeSpecimens(soap, tag?tag:"ns:exchangeSpecimens", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__exchangeSpecimens * SOAP_FMAC4 soap_get_ns__exchangeSpecimens(struct soap *soap, struct ns__exchangeSpecimens *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__exchangeSpecimens(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__exchangeSpecimens * SOAP_FMAC2 soap_instantiate_ns__exchangeSpecimens(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__exchangeSpecimens(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__exchangeSpecimens, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns__exchangeSpecimens);
		if (size)
			*size = sizeof(struct ns__exchangeSpecimens);
	}
	else
	{	cp->ptr = (void*)new (struct ns__exchangeSpecimens[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__exchangeSpecimens);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__exchangeSpecimens*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__exchangeSpecimens(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__exchangeSpecimens %p -> %p\n", q, p));
	*(struct ns__exchangeSpecimens*)p = *(struct ns__exchangeSpecimens*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__exchangeSpecimensResponse(struct soap *soap, struct ns__exchangeSpecimensResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__exchangeSpecimensResponse(struct soap *soap, const struct ns__exchangeSpecimensResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->result);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__exchangeSpecimensResponse(struct soap *soap, const char *tag, int id, const struct ns__exchangeSpecimensResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__exchangeSpecimensResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__exchangeSpecimensResponse * SOAP_FMAC4 soap_in_ns__exchangeSpecimensResponse(struct soap *soap, const char *tag, struct ns__exchangeSpecimensResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__exchangeSpecimensResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__exchangeSpecimensResponse, sizeof(struct ns__exchangeSpecimensResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__exchangeSpecimensResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "result", &a->result, "xsd:string"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__exchangeSpecimensResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__exchangeSpecimensResponse, 0, sizeof(struct ns__exchangeSpecimensResponse), 0, soap_copy_ns__exchangeSpecimensResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__exchangeSpecimensResponse(struct soap *soap, const struct ns__exchangeSpecimensResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__exchangeSpecimensResponse);
	if (soap_out_ns__exchangeSpecimensResponse(soap, tag?tag:"ns:exchangeSpecimensResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__exchangeSpecimensResponse * SOAP_FMAC4 soap_get_ns__exchangeSpecimensResponse(struct soap *soap, struct ns__exchangeSpecimensResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__exchangeSpecimensResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__exchangeSpecimensResponse * SOAP_FMAC2 soap_instantiate_ns__exchangeSpecimensResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__exchangeSpecimensResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__exchangeSpecimensResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns__exchangeSpecimensResponse);
		if (size)
			*size = sizeof(struct ns__exchangeSpecimensResponse);
	}
	else
	{	cp->ptr = (void*)new (struct ns__exchangeSpecimensResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__exchangeSpecimensResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__exchangeSpecimensResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__exchangeSpecimensResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__exchangeSpecimensResponse %p -> %p\n", q, p));
	*(struct ns__exchangeSpecimensResponse*)p = *(struct ns__exchangeSpecimensResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__setEndPoint(struct soap *soap, struct ns__setEndPoint *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->endPoint);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__setEndPoint(struct soap *soap, const struct ns__setEndPoint *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->endPoint);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__setEndPoint(struct soap *soap, const char *tag, int id, const struct ns__setEndPoint *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__setEndPoint), type))
		return soap->error;
	if (soap_out_std__string(soap, "endPoint", -1, &a->endPoint, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__setEndPoint * SOAP_FMAC4 soap_in_ns__setEndPoint(struct soap *soap, const char *tag, struct ns__setEndPoint *a, const char *type)
{
	size_t soap_flag_endPoint = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__setEndPoint *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__setEndPoint, sizeof(struct ns__setEndPoint), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__setEndPoint(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_endPoint && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "endPoint", &a->endPoint, "xsd:string"))
				{	soap_flag_endPoint--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__setEndPoint *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__setEndPoint, 0, sizeof(struct ns__setEndPoint), 0, soap_copy_ns__setEndPoint);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_endPoint > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__setEndPoint(struct soap *soap, const struct ns__setEndPoint *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__setEndPoint);
	if (soap_out_ns__setEndPoint(soap, tag?tag:"ns:setEndPoint", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__setEndPoint * SOAP_FMAC4 soap_get_ns__setEndPoint(struct soap *soap, struct ns__setEndPoint *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__setEndPoint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__setEndPoint * SOAP_FMAC2 soap_instantiate_ns__setEndPoint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__setEndPoint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__setEndPoint, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns__setEndPoint);
		if (size)
			*size = sizeof(struct ns__setEndPoint);
	}
	else
	{	cp->ptr = (void*)new (struct ns__setEndPoint[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__setEndPoint);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__setEndPoint*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__setEndPoint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__setEndPoint %p -> %p\n", q, p));
	*(struct ns__setEndPoint*)p = *(struct ns__setEndPoint*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__setEndPointResponse(struct soap *soap, struct ns__setEndPointResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__setEndPointResponse(struct soap *soap, const struct ns__setEndPointResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__setEndPointResponse(struct soap *soap, const char *tag, int id, const struct ns__setEndPointResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__setEndPointResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__setEndPointResponse * SOAP_FMAC4 soap_in_ns__setEndPointResponse(struct soap *soap, const char *tag, struct ns__setEndPointResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__setEndPointResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__setEndPointResponse, sizeof(struct ns__setEndPointResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__setEndPointResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__setEndPointResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__setEndPointResponse, 0, sizeof(struct ns__setEndPointResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__setEndPointResponse(struct soap *soap, const struct ns__setEndPointResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__setEndPointResponse);
	if (soap_out_ns__setEndPointResponse(soap, tag?tag:"ns:setEndPointResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__setEndPointResponse * SOAP_FMAC4 soap_get_ns__setEndPointResponse(struct soap *soap, struct ns__setEndPointResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__setEndPointResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__setEndPointResponse * SOAP_FMAC2 soap_instantiate_ns__setEndPointResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__setEndPointResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__setEndPointResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new (struct ns__setEndPointResponse);
		if (size)
			*size = sizeof(struct ns__setEndPointResponse);
	}
	else
	{	cp->ptr = (void*)new (struct ns__setEndPointResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct ns__setEndPointResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct ns__setEndPointResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__setEndPointResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__setEndPointResponse %p -> %p\n", q, p));
	*(struct ns__setEndPointResponse*)p = *(struct ns__setEndPointResponse*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
