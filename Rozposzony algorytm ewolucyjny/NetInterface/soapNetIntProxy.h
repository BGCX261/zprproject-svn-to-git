/* soapNetIntProxy.h
   Generated by gSOAP 2.7.15 from NetInteface.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapNetIntProxy_H
#define soapNetIntProxy_H
#include "soapH.h"

class SOAP_CMAC NetIntProxy : public soap
{ public:
	/// Endpoint URL of service 'NetIntProxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	NetIntProxy();
	/// Constructor with copy of another engine state
	NetIntProxy(const struct soap&);
	/// Constructor with engine input+output mode control
	NetIntProxy(soap_mode iomode);
	/// Constructor with engine input and output mode control
	NetIntProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~NetIntProxy();
	/// Initializer used by constructors
	virtual	void NetIntProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (uses soap_destroy and soap_end)
	virtual	void destroy();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Force close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
	virtual	void soap_stream_fault(std::ostream&);
	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'setEndPoint' (returns error code or SOAP_OK)
	virtual	int setEndPoint(std::string endPoint, int &result);

	/// Web service operation 'exchangeSpecimens' (returns error code or SOAP_OK)
	virtual	int exchangeSpecimens(std::string specimentList, std::string &result);

	/// Web service operation 'getStatus' (returns error code or SOAP_OK)
	virtual	int getStatus(std::string &result);

	/// Web service operation 'setParameter' (returns error code or SOAP_OK)
	virtual	int setParameter(std::string parameterChange, int &result);

	/// Web service operation 'runAlgorithm' (returns error code or SOAP_OK)
	virtual	int runAlgorithm(bool &result);

	/// Web service operation 'setConections' (returns error code or SOAP_OK)
	virtual	int setConections(std::string conections, int &result);

	/// Web service operation 'sendConectionsProblem' (returns error code or SOAP_OK)
	virtual	int sendConectionsProblem(std::string conectionProblem, int &result);

	/// Web service operation 'registNode' (returns error code or SOAP_OK)
	virtual	int registNode(std::string endPoint, int &result);

	/// Web service operation 'unRegistNode' (returns error code or SOAP_OK)
	virtual	int unRegistNode(std::string endPoint, int &result);

	/// Web service operation 'getSpecimens' (returns error code or SOAP_OK)
	virtual	int getSpecimens(std::string &result);

	/// Web service operation 'getAppStatus' (returns error code or SOAP_OK)
	virtual	int getAppStatus(std::string &result);

	/// Web service operation 'setAppParameter' (returns error code or SOAP_OK)
	virtual	int setAppParameter(std::string parameterChange, int &result);

	/// Web service operation 'newTask' (returns error code or SOAP_OK)
	virtual	int newTask(std::string task, std::string &result);

	/// Web service operation 'getConnectedNodes' (returns error code or SOAP_OK)
	virtual	int getConnectedNodes(std::string &conections);

	/// Web service operation 'sendMessage' (returns error code or SOAP_OK)
	virtual	int sendMessage(std::string message, int &result);
};
#endif
