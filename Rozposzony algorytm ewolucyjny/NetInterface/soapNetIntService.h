/* soapNetIntService.h
   Generated by gSOAP 2.7.15 from NetInteface.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/
namespace AlgorithmControler
{
class AlgorithmService;
}

namespace Application
{
	class ApplicationService;
}

#ifndef soapNetIntService_H
#define soapNetIntService_H
#include "soapH.h"
#include "../AlgorithmControler/AlgorithmService.hpp"
#include "../Application/ApplicationService.hpp"
class SOAP_CMAC NetIntService : public soap
{ public:
	/// Constructor
	NetIntService();
	NetIntService(AlgorithmControler::AlgorithmService* service);
	NetIntService(Application::ApplicationService * appService);
	enum ModeSer{App, Control} modeSer;

	AlgorithmControler::AlgorithmService* algService;
	Application::ApplicationService * appService;
	/// Constructor with copy of another engine state
	NetIntService(const struct soap&);
	/// Constructor with engine input+output mode control
	NetIntService(soap_mode iomode);
	/// Constructor with engine input and output mode control
	NetIntService(soap_mode imode, soap_mode omode);
	/// Destructor, also frees all deserialized data
	virtual ~NetIntService();
	/// Delete all deserialized data (uses soap_destroy and soap_end)
	virtual	void destroy();
	/// Initializer used by constructor
	virtual	void NetIntService_init(soap_mode imode, soap_mode omode);
	/// Create a copy
	virtual	NetIntService *copy();
	/// Force close connection (normally automatic)
	virtual	int soap_close_socket();
	/// Return sender-related fault to sender
	virtual	int soap_senderfault(const char *string, const char *detailXML);
	/// Return sender-related fault with SOAP 1.2 subcode to sender
	virtual	int soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML);
	/// Return receiver-related fault to sender
	virtual	int soap_receiverfault(const char *string, const char *detailXML);
	/// Return receiver-related fault with SOAP 1.2 subcode to sender
	virtual	int soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML);
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
	virtual	void soap_stream_fault(std::ostream&);
	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Run simple single-thread iterative service on port until a connection error occurs (returns error code or SOAP_OK), use this->bind_flag = SO_REUSEADDR to rebind for a rerun
	virtual	int run(int port);
	/// Bind service to port (returns master socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET bind(const char *host, int port, int backlog);
	/// Accept next request (returns socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET accept();
	/// Serve this request (returns error code or SOAP_OK)
	virtual	int serve();
	/// Used by serve() to dispatch a request (returns error code or SOAP_OK)
	virtual	int dispatch();

	///
	/// Service operations (you should define these):
	///

	/// Web service operation 'setEndPoint' (returns error code or SOAP_OK)
	virtual	int setEndPoint(std::string endPoint, int &result);

	/// Web service operation 'exchangeSpecimens' (returns error code or SOAP_OK)
	virtual	int exchangeSpecimens(std::string specimentList, std::string &result);

	/// Web service operation 'getStatus' (returns error code or SOAP_OK)
	virtual	int getStatus(std::string &result);

	/// Web service operation 'setParameter' (returns error code or SOAP_OK)
	virtual	int setParameter(std::string parameterChange, int &result);

	/// Web service operation 'runAlgorithm' (returns error code or SOAP_OK)
	virtual	int runAlgorithm(bool &result);

	/// Web service operation 'setConections' (returns error code or SOAP_OK)
	virtual	int setConections(std::string conections, int &result);

	/// Web service operation 'sendConectionsProblem' (returns error code or SOAP_OK)
	virtual	int sendConectionsProblem(std::string conectionProblem, int &result);

	/// Web service operation 'registNode' (returns error code or SOAP_OK)
	virtual	int registNode(std::string endPoint, int &result);

	/// Web service operation 'unRegistNode' (returns error code or SOAP_OK)
	virtual	int unRegistNode(std::string endPoint, int &result);

	/// Web service operation 'getSpecimens' (returns error code or SOAP_OK)
	virtual	int getSpecimens(std::string &result);

	/// Web service operation 'getAppStatus' (returns error code or SOAP_OK)
	virtual	int getAppStatus(std::string &result);

	/// Web service operation 'setAppParameter' (returns error code or SOAP_OK)
	virtual	int setAppParameter(std::string parameterChange, int &result);

	/// Web service operation 'newTask' (returns error code or SOAP_OK)
	virtual	int newTask(std::string task, std::string &result);

	/// Web service operation 'getConnectedNodes' (returns error code or SOAP_OK)
	virtual	int getConnectedNodes(std::string &conections);

	/// Web service operation 'sendMessage' (returns error code or SOAP_OK)
	virtual	int sendMessage(std::string message, int &result);
};
#endif
