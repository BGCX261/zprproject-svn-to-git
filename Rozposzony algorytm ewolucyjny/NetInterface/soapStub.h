/* soapStub.h
   Generated by gSOAP 2.7.15 from NetInteface.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare here */

#endif

#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE_ns__setEndPointResponse
#define SOAP_TYPE_ns__setEndPointResponse (10)
/* ns:setEndPointResponse */
struct ns__setEndPointResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__setEndPoint
#define SOAP_TYPE_ns__setEndPoint (11)
/* ns:setEndPoint */
struct ns__setEndPoint
{
public:
	std::string endPoint;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__exchangeSpecimensResponse
#define SOAP_TYPE_ns__exchangeSpecimensResponse (14)
/* ns:exchangeSpecimensResponse */
struct ns__exchangeSpecimensResponse
{
public:
	std::string result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__exchangeSpecimens
#define SOAP_TYPE_ns__exchangeSpecimens (15)
/* ns:exchangeSpecimens */
struct ns__exchangeSpecimens
{
public:
	std::string specimentList;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__getStatusResponse
#define SOAP_TYPE_ns__getStatusResponse (17)
/* ns:getStatusResponse */
struct ns__getStatusResponse
{
public:
	std::string result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__getStatus
#define SOAP_TYPE_ns__getStatus (18)
/* ns:getStatus */
struct ns__getStatus
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_ns__setParameterResponse
#define SOAP_TYPE_ns__setParameterResponse (20)
/* ns:setParameterResponse */
struct ns__setParameterResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__setParameter
#define SOAP_TYPE_ns__setParameter (21)
/* ns:setParameter */
struct ns__setParameter
{
public:
	std::string parameterChange;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__runAlgorithmResponse
#define SOAP_TYPE_ns__runAlgorithmResponse (25)
/* ns:runAlgorithmResponse */
struct ns__runAlgorithmResponse
{
public:
	bool result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE_ns__runAlgorithm
#define SOAP_TYPE_ns__runAlgorithm (26)
/* ns:runAlgorithm */
struct ns__runAlgorithm
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_ns__setConectionsResponse
#define SOAP_TYPE_ns__setConectionsResponse (28)
/* ns:setConectionsResponse */
struct ns__setConectionsResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__setConections
#define SOAP_TYPE_ns__setConections (29)
/* ns:setConections */
struct ns__setConections
{
public:
	std::string conections;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__sendConectionsProblemResponse
#define SOAP_TYPE_ns__sendConectionsProblemResponse (31)
/* ns:sendConectionsProblemResponse */
struct ns__sendConectionsProblemResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__sendConectionsProblem
#define SOAP_TYPE_ns__sendConectionsProblem (32)
/* ns:sendConectionsProblem */
struct ns__sendConectionsProblem
{
public:
	std::string conectionProblem;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__registNodeResponse
#define SOAP_TYPE_ns__registNodeResponse (34)
/* ns:registNodeResponse */
struct ns__registNodeResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__registNode
#define SOAP_TYPE_ns__registNode (35)
/* ns:registNode */
struct ns__registNode
{
public:
	std::string endPoint;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__unRegistNodeResponse
#define SOAP_TYPE_ns__unRegistNodeResponse (37)
/* ns:unRegistNodeResponse */
struct ns__unRegistNodeResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__unRegistNode
#define SOAP_TYPE_ns__unRegistNode (38)
/* ns:unRegistNode */
struct ns__unRegistNode
{
public:
	std::string endPoint;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__getSpecimensResponse
#define SOAP_TYPE_ns__getSpecimensResponse (40)
/* ns:getSpecimensResponse */
struct ns__getSpecimensResponse
{
public:
	std::string result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__getSpecimens
#define SOAP_TYPE_ns__getSpecimens (41)
/* ns:getSpecimens */
struct ns__getSpecimens
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_ns__getAppStatusResponse
#define SOAP_TYPE_ns__getAppStatusResponse (43)
/* ns:getAppStatusResponse */
struct ns__getAppStatusResponse
{
public:
	std::string result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__getAppStatus
#define SOAP_TYPE_ns__getAppStatus (44)
/* ns:getAppStatus */
struct ns__getAppStatus
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_ns__setAppParameterResponse
#define SOAP_TYPE_ns__setAppParameterResponse (46)
/* ns:setAppParameterResponse */
struct ns__setAppParameterResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__setAppParameter
#define SOAP_TYPE_ns__setAppParameter (47)
/* ns:setAppParameter */
struct ns__setAppParameter
{
public:
	std::string parameterChange;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__newTaskResponse
#define SOAP_TYPE_ns__newTaskResponse (49)
/* ns:newTaskResponse */
struct ns__newTaskResponse
{
public:
	std::string result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__newTask
#define SOAP_TYPE_ns__newTask (50)
/* ns:newTask */
struct ns__newTask
{
public:
	std::string task;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__getConnectedNodesResponse
#define SOAP_TYPE_ns__getConnectedNodesResponse (52)
/* ns:getConnectedNodesResponse */
struct ns__getConnectedNodesResponse
{
public:
	std::string conections;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__getConnectedNodes
#define SOAP_TYPE_ns__getConnectedNodes (53)
/* ns:getConnectedNodes */
struct ns__getConnectedNodes
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_ns__sendMessageResponse
#define SOAP_TYPE_ns__sendMessageResponse (55)
/* ns:sendMessageResponse */
struct ns__sendMessageResponse
{
public:
	int result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__sendMessage
#define SOAP_TYPE_ns__sendMessage (56)
/* ns:sendMessage */
struct ns__sendMessage
{
public:
	std::string message;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (57)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (58)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (60)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (63)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (64)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
